/**
 * Swagger API documentation for TODO Application
 * Swagger API documentation for TODO Application
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: rajaoarisoner@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CommandeClientDto } from '../../src/app/model/commandeClientDto';
import { LigneCommandeClientDto } from '../../src/app/model/ligneCommandeClientDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CommandeClientsService {

    protected basePath = 'https://localhosthttp://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Supprimer une commande client par son ID
     * Cette methode permet de supprimer une commande client par son ID
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/commandeClient/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idCommande
     * @param idLigneCommande
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteArticle(idCommande: number, idLigneCommande: number, observe?: 'body', reportProgress?: boolean): Observable<CommandeClientDto>;
    public deleteArticle(idCommande: number, idLigneCommande: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandeClientDto>>;
    public deleteArticle(idCommande: number, idLigneCommande: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandeClientDto>>;
    public deleteArticle(idCommande: number, idLigneCommande: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCommande === null || idCommande === undefined) {
            throw new Error('Required parameter idCommande was null or undefined when calling deleteArticle.');
        }

        if (idLigneCommande === null || idLigneCommande === undefined) {
            throw new Error('Required parameter idLigneCommande was null or undefined when calling deleteArticle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<CommandeClientDto>(`${this.basePath}/api/commandeClient/delete/client/${encodeURIComponent(String(idCommande))}/${encodeURIComponent(String(idLigneCommande))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lister les commande clients
     * Cette methode permet de lister les commande clients
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAll(observe?: 'body', reportProgress?: boolean): Observable<Array<CommandeClientDto>>;
    public findAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CommandeClientDto>>>;
    public findAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CommandeClientDto>>>;
    public findAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CommandeClientDto>>(`${this.basePath}/api/commandeClients`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idCommande
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllLigneCommandeClientByCommandeClientId(idCommande: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LigneCommandeClientDto>>;
    public findAllLigneCommandeClientByCommandeClientId(idCommande: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LigneCommandeClientDto>>>;
    public findAllLigneCommandeClientByCommandeClientId(idCommande: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LigneCommandeClientDto>>>;
    public findAllLigneCommandeClientByCommandeClientId(idCommande: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCommande === null || idCommande === undefined) {
            throw new Error('Required parameter idCommande was null or undefined when calling findAllLigneCommandeClientByCommandeClientId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LigneCommandeClientDto>>(`${this.basePath}/api/commandeClient/ligneCommande/${encodeURIComponent(String(idCommande))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rechercher une commande client par ID
     * Cette methode permet de chercher une commande client par son ID
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById(id: number, observe?: 'body', reportProgress?: boolean): Observable<CommandeClientDto>;
    public findById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandeClientDto>>;
    public findById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandeClientDto>>;
    public findById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CommandeClientDto>(`${this.basePath}/api/commandeClient/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enregistrer une commande client (Ajouter/Modifier)
     * Cette methode permet d&#39;enregister ou de modifier une commande client
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save(body?: CommandeClientDto, observe?: 'body', reportProgress?: boolean): Observable<CommandeClientDto>;
    public save(body?: CommandeClientDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandeClientDto>>;
    public save(body?: CommandeClientDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandeClientDto>>;
    public save(body?: CommandeClientDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CommandeClientDto>(`${this.basePath}/api/commandeClient/create`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idCommande
     * @param idLigneCommande
     * @param idArticle
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateArticle(idCommande: number, idLigneCommande: number, idArticle: number, observe?: 'body', reportProgress?: boolean): Observable<CommandeClientDto>;
    public updateArticle(idCommande: number, idLigneCommande: number, idArticle: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandeClientDto>>;
    public updateArticle(idCommande: number, idLigneCommande: number, idArticle: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandeClientDto>>;
    public updateArticle(idCommande: number, idLigneCommande: number, idArticle: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCommande === null || idCommande === undefined) {
            throw new Error('Required parameter idCommande was null or undefined when calling updateArticle.');
        }

        if (idLigneCommande === null || idLigneCommande === undefined) {
            throw new Error('Required parameter idLigneCommande was null or undefined when calling updateArticle.');
        }

        if (idArticle === null || idArticle === undefined) {
            throw new Error('Required parameter idArticle was null or undefined when calling updateArticle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.patch<CommandeClientDto>(`${this.basePath}/api/commandeClient/update/article/${encodeURIComponent(String(idCommande))}/${encodeURIComponent(String(idLigneCommande))}/${encodeURIComponent(String(idArticle))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idCommande
     * @param idClient
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateClient(idCommande: number, idClient: number, observe?: 'body', reportProgress?: boolean): Observable<CommandeClientDto>;
    public updateClient(idCommande: number, idClient: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandeClientDto>>;
    public updateClient(idCommande: number, idClient: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandeClientDto>>;
    public updateClient(idCommande: number, idClient: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCommande === null || idCommande === undefined) {
            throw new Error('Required parameter idCommande was null or undefined when calling updateClient.');
        }

        if (idClient === null || idClient === undefined) {
            throw new Error('Required parameter idClient was null or undefined when calling updateClient.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.patch<CommandeClientDto>(`${this.basePath}/api/commandeClient/update/client/${encodeURIComponent(String(idCommande))}/${encodeURIComponent(String(idClient))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idCommande
     * @param etatCommande
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEtatCommade(idCommande: number, etatCommande: 'EN_PREPARATION' | 'VALIDEE' | 'LIVREE', observe?: 'body', reportProgress?: boolean): Observable<CommandeClientDto>;
    public updateEtatCommade(idCommande: number, etatCommande: 'EN_PREPARATION' | 'VALIDEE' | 'LIVREE', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandeClientDto>>;
    public updateEtatCommade(idCommande: number, etatCommande: 'EN_PREPARATION' | 'VALIDEE' | 'LIVREE', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandeClientDto>>;
    public updateEtatCommade(idCommande: number, etatCommande: 'EN_PREPARATION' | 'VALIDEE' | 'LIVREE', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCommande === null || idCommande === undefined) {
            throw new Error('Required parameter idCommande was null or undefined when calling updateEtatCommade.');
        }

        if (etatCommande === null || etatCommande === undefined) {
            throw new Error('Required parameter etatCommande was null or undefined when calling updateEtatCommade.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.patch<CommandeClientDto>(`${this.basePath}/api/commandeClient/update/etat/${encodeURIComponent(String(idCommande))}/${encodeURIComponent(String(etatCommande))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idCommande
     * @param idLigneCommande
     * @param quantite
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateQuantiteCommande(idCommande: number, idLigneCommande: number, quantite: number, observe?: 'body', reportProgress?: boolean): Observable<CommandeClientDto>;
    public updateQuantiteCommande(idCommande: number, idLigneCommande: number, quantite: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommandeClientDto>>;
    public updateQuantiteCommande(idCommande: number, idLigneCommande: number, quantite: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommandeClientDto>>;
    public updateQuantiteCommande(idCommande: number, idLigneCommande: number, quantite: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCommande === null || idCommande === undefined) {
            throw new Error('Required parameter idCommande was null or undefined when calling updateQuantiteCommande.');
        }

        if (idLigneCommande === null || idLigneCommande === undefined) {
            throw new Error('Required parameter idLigneCommande was null or undefined when calling updateQuantiteCommande.');
        }

        if (quantite === null || quantite === undefined) {
            throw new Error('Required parameter quantite was null or undefined when calling updateQuantiteCommande.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.patch<CommandeClientDto>(`${this.basePath}/api/commandeClient/update/quantite/${encodeURIComponent(String(idCommande))}/${encodeURIComponent(String(idLigneCommande))}/${encodeURIComponent(String(etatCommande))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

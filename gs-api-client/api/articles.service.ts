/**
 * Swagger API documentation for TODO Application
 * Swagger API documentation for TODO Application
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: rajaoarisoner@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ArticleDto } from '../../src/app/model/articleDto';
import { LigneCommandeClientDto } from '../../src/app/model/ligneCommandeClientDto';
import { LigneCommandeFournisseurDto } from '../../src/app/model/ligneCommandeFournisseurDto';
import { LigneVenteDto } from '../../src/app/model/ligneVenteDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ArticlesService {

    protected basePath = 'https://localhosthttp://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Supprimer un article par son ID
     * Cette methode permet de supprimer un article par son ID
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling _delete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/article/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lister les articles
     * Cette methode permet de lister les articles
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAll(observe?: 'body', reportProgress?: boolean): Observable<Array<ArticleDto>>;
    public findAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArticleDto>>>;
    public findAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArticleDto>>>;
    public findAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ArticleDto>>(`${this.basePath}/api/articles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idCategory
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllArticleByCategoryId(idCategory: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ArticleDto>>;
    public findAllArticleByCategoryId(idCategory: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArticleDto>>>;
    public findAllArticleByCategoryId(idCategory: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArticleDto>>>;
    public findAllArticleByCategoryId(idCategory: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCategory === null || idCategory === undefined) {
            throw new Error('Required parameter idCategory was null or undefined when calling findAllArticleByCategoryId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ArticleDto>>(`${this.basePath}/api/articles/filter/category/${encodeURIComponent(String(idCategory))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rechercher un article par code
     * Cette methode permet de chercher un article par son code
     * @param code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByCodeArticle(code: string, observe?: 'body', reportProgress?: boolean): Observable<ArticleDto>;
    public findByCodeArticle(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ArticleDto>>;
    public findByCodeArticle(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ArticleDto>>;
    public findByCodeArticle(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling findByCodeArticle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ArticleDto>(`${this.basePath}/api/article/code/${encodeURIComponent(String(code))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rechercher un article par ID
     * Cette methode permet de chercher un article par son ID
     * @param articleId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById(articleId: number, observe?: 'body', reportProgress?: boolean): Observable<ArticleDto>;
    public findById(articleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ArticleDto>>;
    public findById(articleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ArticleDto>>;
    public findById(articleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (articleId === null || articleId === undefined) {
            throw new Error('Required parameter articleId was null or undefined when calling findById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ArticleDto>(`${this.basePath}/api/article/${encodeURIComponent(String(articleId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idArticle
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findHistoriqueCommandeClient(idArticle: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LigneCommandeClientDto>>;
    public findHistoriqueCommandeClient(idArticle: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LigneCommandeClientDto>>>;
    public findHistoriqueCommandeClient(idArticle: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LigneCommandeClientDto>>>;
    public findHistoriqueCommandeClient(idArticle: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idArticle === null || idArticle === undefined) {
            throw new Error('Required parameter idArticle was null or undefined when calling findHistoriqueCommandeClient.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LigneCommandeClientDto>>(`${this.basePath}/api/articles/historique/commandeclient/${encodeURIComponent(String(idArticle))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idArticle
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findHistoriqueCommandeFournisseur(idArticle: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LigneCommandeFournisseurDto>>;
    public findHistoriqueCommandeFournisseur(idArticle: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LigneCommandeFournisseurDto>>>;
    public findHistoriqueCommandeFournisseur(idArticle: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LigneCommandeFournisseurDto>>>;
    public findHistoriqueCommandeFournisseur(idArticle: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idArticle === null || idArticle === undefined) {
            throw new Error('Required parameter idArticle was null or undefined when calling findHistoriqueCommandeFournisseur.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LigneCommandeFournisseurDto>>(`${this.basePath}/api/articles/historique/commandefournisseur/${encodeURIComponent(String(idArticle))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idArticle
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findHistoriqueVente(idArticle: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LigneVenteDto>>;
    public findHistoriqueVente(idArticle: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LigneVenteDto>>>;
    public findHistoriqueVente(idArticle: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LigneVenteDto>>>;
    public findHistoriqueVente(idArticle: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idArticle === null || idArticle === undefined) {
            throw new Error('Required parameter idArticle was null or undefined when calling findHistoriqueVente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LigneVenteDto>>(`${this.basePath}/api/articles/historique/vente/${encodeURIComponent(String(idArticle))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enregistrer un article (Ajouter/Modifier)
     * Cette methode permet d&#39;enregister ou de modifier un article
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save(body?: ArticleDto, observe?: 'body', reportProgress?: boolean): Observable<ArticleDto>;
    public save(body?: ArticleDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ArticleDto>>;
    public save(body?: ArticleDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ArticleDto>>;
    public save(body?: ArticleDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ArticleDto>(`${this.basePath}/api/article/create`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
